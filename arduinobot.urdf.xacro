<?xml version="1.0"?>
<!-- FIRST DEFINE THE XML MODEL VERSION-->
<!-- IT WORKS AS A CONTAINER FOR THE COMPONENTS OF THE ROBOT-->


<!--START BY DEFINING THE NAME OF THE ROBOT -->
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="arduinobot">
    <xacro:include filename = "$(find arduinobot_description)/urdf/arduinobot_gazebo.xacro"/>
    <xacro:include filename = "$(find arduinobot_description)/urdf/arduinobot_ros2_control.xacro"/>
    <!--THE FOLLOWING XACRO PROPERTIES ARE CONSTANT VALUES-->
    <!--BY USING PROPERTIES TIME IS SAVED WHEN USING THESE VALUES-->
    <xacro:property name = "PI" value = "3.14159"/>
    <xacro:property name = "effort" value = "30.0"/>
    <xacro:property name = "velocity" value = "10.0"/>

    <!-- NOW THE INERTIA OF THE ROBOT IS DEFINED AS A MACRO-->
    <!-- SINCE THE ROBOT MASS AND BODY IS SIMPLE IT IS ASSUMED A CONSTANT MOMENT OF INERTIA IN ALL DIRECTIONS-->
    <!-- THE SAME INERTIA APPLIES TO ALL LINKS AND BECAUSE OF THIS A MACRO IS USED TO SAVE TIME-->
    <!-- THE LINK MASS IS A VARIABLE IN THE MACRO-->
    <xacro:macro name="default_inertial" params="mass">
        <!-- THE INERTIAL TAG IS USED TO DECLARE THE MOMENT OF INERTIA-->
        <inertial>
            <!-- THE MASS DEPENDS ON THE LINK-->
            <mass value="${mass}"/>
            <inertia ixx="1.0" ixy="0.0" ixz="0.0"
                     iyy="1.0" iyz="0.0"
                     izz="1.0"/>
        </inertial>
    </xacro:macro>
    <!-- TRANSMISSION PROPERTIES FOR THE MOTORS AND THE JOINTS IN THE ROBOT-->
    <xacro:macro name = "default_transmission" params = "number">
        <transmission name = "transmission_${number}">
            <plugin>transmission_interface/SimpleTransmission</plugin>
            <!-- THIS LINE DECLARES THE SG90 SERVO ACTUATORS-->
            <actuator name = "motor_${number}" role = "actuator1"/>
            <joint name = "joint_${number}" role ="joint1">
                <!-- THE MECHANICAL REDUCATION REPRESENTS THE LOSS IN THE TRANSMISSION-->
                <mechanical_reduction>
                    1.0
                </mechanical_reduction>
            </joint>

        </transmission>
    </xacro:macro>
    <!-- DEFINE THE WORLD LINK FOR REFERENCE-->    
    <link name = "world"/>
    <!-- NOW DEFINE THE FIRST LINK OF THE ROBOT-->
    <link name = "base_link">
        
        <!-- THE INERTIA MACRO IS INITIALIZED WITH A MASS OF 1 OF BASE LINK-->
        <xacro:default_inertial mass="1.0"/>

        <!-- OPEN THE VISUAL ATRIBUTE TAG-->
        <visual>
            <!-- THE ORIGIN TAG ASSIGNS ROTATION AND COORDENATES FOR LINK-->
            <origin rpy = "0 0 0" xyz = "-0.5 -0.5 0"/>
            <!--DISPLAY A GEOMETRY-->
            <geometry>
                <!-- THE MESH IS LOADED BY SELECTING IT FROM THE PACKAGE THE SCALE IS 0.01 BECAUSE THE ROBOT IS MEASURED IN CM-->
                <mesh filename="package://arduinobot_description/meshes/basement.STL" scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>
        <!-- THE COLLISION TAG DECLARES THE VOLUME OF THE LINK IN THE WORLD FOR COLLISION DETECTING-->
        <!-- COLLISION PROPERTIES ARE DECLARED USING THE MESH-->
        <collision>
            <origin rpy = "0 0 0" xyz = "-0.5 -0.5 0"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/basement.STL" scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- NOW THE FIRST JOINT THAT IS DEFINED FIXES THE BASE LINK WITH THE WORLD REFERENCE-->
    <joint name = "virtual_joint" type="fixed">
        <!-- THE PARENT IS THE WORLD LINK-->
        <!-- THE CHILD IS THE BASE LINK-->
        <!-- THIS ORIGIN TAG SETS THE WAY THE LINKS ARE ORIENTED BETWEEN EACH OTHER-->
        <parent link = "world"/>
        <child link = "base_link"/>
        <origin rpy = "0 0 0" xyz ="0 0 0"/>
    </joint>

    <!-- NOW THE PROCESS NEEDS TO BE REPEATED FOR THE REMAINING LINKS AND JOINTS-->

    <!-- THIS LINK WILL ROTATE IN REFERENCE TO THE PARENT LINK THE BASE-->
    <!-- THIS LINK ENABLES A YAW ROTATION -->
    <link name = "base_plate">
        <!-- THE INERTIA MACRO IS INITIALIZED WITH A MASS OF 0.1 OF BASE PLATE-->
        <xacro:default_inertial mass="0.1"/>
        <!-- VISUAL TAG IS SIMILAR BUT THE COORDINATES NEED TO CONSIDER PLACEMENT-->
        <!-- FOR REFERENCE THE MODEL PLANS NEED TO BE REVIEWED-->
        <visual>
            <!-- COORDINATES ARE EXTRACTED FROM DESIGN DRAWINGS -->
            <origin rpy = "0 0 0" xyz = "-0.39 -0.39 -0.56"/>
            <geometry>
                <!-- THIS MESH IS THE PLATE THAT ROTATES-->
                <mesh filename = "package://arduinobot_description/meshes/base_plate.STL" scale = "0.01 0.01 0.01"/>
            </geometry>
        </visual>
        <!-- THE COLLISION TAG DECLARES THE VOLUME OF THE LINK IN THE WORLD FOR COLLISION DETECTING-->
        <!-- COLLISION PROPERTIES ARE DECLARED USING THE MESH-->
        <collision>
            <origin rpy = "0 0 0" xyz = "-0.39 -0.39 -0.56"/>
            <geometry>
                <mesh filename = "package://arduinobot_description/meshes/base_plate.STL" scale = "0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>
    <!-- NOW A REVOLUTE JOINT IS DESCRIBED-->
    <joint name="joint_1" type="revolute">
        <!-- THE PARENT IS THE FIXED BASE LINK-->
        <parent link = "base_link"/>
        <!-- THE CHILD IS THE FIRST LINK-->
        <!-- ROBOT CONSTRUCTION STARTS FROM THE BASE AND MOVES UNTIL END EFFECTOR-->
        <child link = "base_plate"/>
        <!-- THE AXIS TAG INDICATES THE AXIS FOR REVOLUTE-->
        <!-- IT IS A YAW MOVEMENT BECAUSE IT ROTATES IN Z AXIS-->
        <axis xyz = "0 0 1"/>
        <!-- THE ORIGIN TAG SETS THE POSITION OF THE LINKS BASED ON DRAWINGS-->
        <origin rpy = "0 0 0" xyz="0 0 0.307"/>
        <!--THESE ARE THE MECHANICAL LIMITS OF THE JOINT-->
        <!--THEY ALLOW TO CONTROL THE MAXIMUM ROTATION ANGLE-->
        <limit lower="-${PI/2}" upper="${PI/2}" effort="${effort}" velocity="${velocity}"/>
    </joint>

    <!-- THE SECOND LINK WILL BE DEFINED-->
    <!-- THIS LINK ALSO ROTATES IN RESPECT TO THE OTHER LINK-->
    <!-- THIS ROTATION GENERATES A ROLL MOVEMENT IN Z AXIS-->
    <link name="forward_drive_arm">
        <!-- THE INERTIA MACRO IS INITIALIZED WITH A MASS OF 0.1 OF FORWARD DRIVE ARM-->
        <xacro:default_inertial mass="0.1"/>

        <visual>
            <origin rpy="0 -${PI/2} ${PI/2}" xyz="0.19 0.06 -0.08"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/forward_drive_arm.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </visual>
        <!-- THE COLLISION TAG DECLARES THE VOLUME OF THE LINK IN THE WORLD FOR COLLISION DETECTING-->
        <!-- COLLISION PROPERTIES ARE DECLARED USING THE MESH-->
        <collision>
            <origin rpy="0 -${PI/2} ${PI/2}" xyz="0.19 0.06 -0.08"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/forward_drive_arm.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- NOW THE SECOND JOINT IS DEFINED-->
    <!-- IT IS A REVOLUTE JOINT FOR ROLL MOVEMENT IN X AXIS-->
    <!-- THE PARENT IS THE BASE PLATE AND THE CHILD IS THE DRIVE ARM LINK-->
    <!-- THE ORIGIN IS ESTABLISHED BY CHECKING ROBOT DRAWINGS-->
    <!-- THE LIMIT ESTABLISHES THE LIMITS FOR ROTATION WHICH IS 90 DEG-->
    <joint name="joint_2" type="revolute">
        <parent link="base_plate"/>
        <child link="forward_drive_arm"/>
        <axis xyz="1 0 0"/>
        <origin rpy="0 0 0" xyz="-0.02 0 0.35"/>
        <limit lower="-${PI/2}" upper="${PI/2}" effort="${effort}" velocity="${velocity}"/>
    </joint>

    <!-- THE THIRD LINK WILL BE DESCRIBED NOW-->
    <!-- THE LINK WILL BE THE HORIZONTAL ARM WHICH IS CONNECTED TO THE END EFFECTOR-->
    <link name="horizontal_arm">
        <!-- THE INERTIA MACRO IS INITIALIZED WITH A MASS OF 0.1 OF HORIZONTAL ARM-->
        <xacro:default_inertial mass="0.1"/>

        <visual>
            <origin rpy="${PI/2} 0 ${PI/2}" xyz="-0.03 -0.4 -0.06"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/horizontal_arm.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </visual>
        <!-- THE COLLISION TAG DECLARES THE VOLUME OF THE LINK IN THE WORLD FOR COLLISION DETECTING-->
        <!-- COLLISION PROPERTIES ARE DECLARED USING THE MESH-->
        <collision>
            <origin rpy="${PI/2} 0 ${PI/2}" xyz="-0.03 -0.4 -0.06"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/horizontal_arm.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>
    <!-- NOW THE CORRESPONDING JOINT IS DESCRIBED TO CONNECT THE FORWARD DRIVE ARM AND THE HORIZONTAL ARM-->
    <!-- THE TYPE IS ALSO A REVOLUTE JOINT-->
    <!-- SIMILAR AS BEFORE THE PARENT IS THE FORWARD ARM AND THE CHILD IS THE NEWLY DEFINED LINK-->
    <!-- ROTATION LIMITS ARE 90 DEG -->
    <joint name="joint_3" type="revolute">
        <parent link="forward_drive_arm"/>
        <child link="horizontal_arm"/>
        <axis xyz="1 0 0"/>
        <origin rpy="0 0 0" xyz="0 0 0.8"/>
        <limit lower="-${PI/2}" upper="${PI/2}" effort="${effort}" velocity="${velocity}"/>
    </joint>

    <!-- NOW THE END EFFECTOR WILL BE DEFINED-->
    <!-- IT IS COMPOSED OF A CLAW SUPPORT AND 2 GRIPPER FINGERS-->
    <!-- FIRST THE CLAW SUPPORT IS DEFINED AS A LINK-->
    <link name="claw_support">
        <!-- THE INERTIA MACRO IS INITIALIZED WITH A MASS OF 0.05 OF CLAW SUPPORT-->
        <xacro:default_inertial mass="0.05"/>

        <visual>
            <origin rpy="0 0 ${PI/2}" xyz ="0 -0.05 -0.15"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/claw_support.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </visual>
        <collision>
            <origin rpy="0 0 ${PI/2}" xyz ="0 -0.05 -0.15"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/claw_support.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>
    <!-- THE CLAW SUPPORT NEEDS TO BE FIXED TO THE HORIZONTAL ARM-->
    <!-- A FIXED JOINT IS USED FOR THIS PURPOSE-->
    <!-- THE CHILD IS THE CLAW SUPPORT AND THE PARENT IS THE ARM THAT HOLDS IT-->
    <joint name="horizontal_arm_to_claw_support" type="fixed">
        <parent link="horizontal_arm"/>
        <child link="claw_support"/>
        <origin xyz="0 0.82 0" rpy="0 0 0"/>
    </joint>

    <!-- NOW THE RIGHT GRIPPER IS DEFINED-->
    <!-- IT IS A LINK THAT WILL REVOLUTE IN REFERENCE OF THE CLAW SUPPORT-->
    <link name="gripper_right">
        <!-- THE INERTIA MACRO IS INITIALIZED WITH A MASS OF 0.1 OF GRIPPER FINGER-->
        <xacro:default_inertial mass="0.01"/>
        <visual>
            <origin xyz="-0.1 0.5 -0.1" rpy="0 0 -${PI/2}"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/right_finger.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="-0.1 0.5 -0.1" rpy="0 0 -${PI/2}"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/right_finger.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>
    <!-- NOW THE LEFT GRIPPER FINGER IS DECLARED-->
    <!-- THE ORIGIN IS DEFINED BASED ON THE ROBOT DRAWINGS, THE DISTANCE IS READABLE THERE-->
    <link name="gripper_left">
        <!-- THE INERTIA MACRO IS INITIALIZED WITH A MASS OF 0.1 OF GRIPPER FINGER-->
        <xacro:default_inertial mass="0.01"/>

        <visual>
            <origin xyz="-0.04 0.5 -0.1" rpy="0 0 -${PI/2}"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/left_finger.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="-0.04 0.5 -0.1" rpy="0 0 -${PI/2}"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/left_finger.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- THE GRIPPER FINGER JOINTS ARE DECLARED HERE-->
    <!-- REVOLUTE JOINTS ARE USED-->
    <!-- A JOINT FOR EACH FINGER IS NECESSARY-->
    <!-- XYZ AND RPY DIMENSIONS ARE READ OFF THE ROBOT DRAWINGS AND PLANS-->
    
    <joint name="joint_4" type="revolute">
        <parent link="claw_support"/>
        <child link="gripper_right"/>
        <axis xyz="0 0 1"/>
        <origin rpy="0 0 0" xyz="-0.04 0.13 -0.1"/>
        <limit lower="-${PI/2}" upper="0.0" effort="${effort}" velocity="${velocity}"/>
    </joint>

   <!-- THE JOINTS NEED TO MIMIC EACH OTHER BUT MIRRORED BECAUSE THEY ARE OPPOSITE EACH OTHER--> 
    <joint name="joint_5" type="revolute">
        <parent link="claw_support"/>
        <child link="gripper_left"/>
        <axis xyz="0 0 1"/>
        <origin rpy="0 0 0" xyz="-0.22 0.13 -0.1"/>
        <limit lower="0.0" upper="${PI/2}" effort="${effort}" velocity="${velocity}"/>
        <mimic joint ="joint_4" multiplier = "-1"/>
    </joint>
    <!-- NOW A NEW LINK WILL BE DEFINED FOR THE CAMERA-->
    <!-- THE LINK WILL BE FIXED-->
    <!-- THE CAMERA IS ATTACHED TO THE BASE LINK-->
    <!-- CAMERA PLACEMENT CAN BE CHECKED ON CAD DRAWINGS OF ROBOT-->
    <link name="rgb_camera">
        <xacro:default_inertial mass="0.001"/>
        <visual>
            <origin rpy= "-1.57 0 -1.57" xyz ="-0.1 0.125 0.15"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/pi_camera.STL" scale ="0.01 0.01 0.01"/>
            </geometry>
        </visual>
        <collision>
            <origin rpy= "-1.57 0 -1.57" xyz ="-0.1 0.125 0.15"/>
            <geometry>
                <mesh filename="package://arduinobot_description/meshes/pi_camera.STL" scale ="0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <!-- NOW THE CAMERA JOINT IS DEFINED-->
    <!-- THE JOINT CONNECTS THE BASE LINK AND THE CAMERA LINK-->
    <!-- THE ORIGIN TAB IS DEFINED BY CHECKING THE ROBOT DRAWINGS-->
    <!-- THE PARENT IS THE BASE AND THE CHILD IS THE RGB CAMERA-->
    <joint name="rgb_camera_joint" type="fixed">
        <parent link="base_link"/>
        <child link ="rgb_camera"/>
        <origin rpy ="0 -0.5 1.57" xyz ="0 0.45 0.2"/>
    </joint>

    <xacro:default_transmission number="1"/>
    <xacro:default_transmission number="2"/>
    <xacro:default_transmission number="3"/>
    <xacro:default_transmission number="4"/>

    
</robot>
